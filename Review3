#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>

#define MAX_BUFFER_SIZE 1024
#define PORT 12345

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[MAX_BUFFER_SIZE];

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
        error("ERROR opening socket");

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(PORT);

    // Bind socket to local address
    if (bind(sockfd, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
        error("ERROR on binding");

    std::cout << "Server listening on port " << PORT << "..." << std::endl;

    while (true) {
        // Receive file size from client
        int file_size;
        int bytes_received = recvfrom(sockfd, &file_size, sizeof(file_size), 0,
                                      (struct sockaddr *) &client_addr, &client_len);
        if (bytes_received < 0)
            error("ERROR in recvfrom");

        file_size = ntohl(file_size);  // Convert from network to host byte order

        std::cout << "Receiving file of size: " << file_size << " bytes" << std::endl;

        // Receive file data
        std::ofstream received_file("received_file", std::ios::out | std::ios::binary);
        if (!received_file.is_open()) {
            std::cerr << "Error opening file to write" << std::endl;
            close(sockfd);
            exit(1);
        }

        int total_received = 0;
        while (total_received < file_size) {
            int bytes_to_receive = std::min(MAX_BUFFER_SIZE, file_size - total_received);
            bytes_received = recvfrom(sockfd, buffer, bytes_to_receive, 0,
                                      (struct sockaddr *) &client_addr, &client_len);
            if (bytes_received < 0)
                error("ERROR in recvfrom");

            received_file.write(buffer, bytes_received);
            total_received += bytes_received;
        }

        received_file.close();
        std::cout << "File received successfully." << std::endl;
    }

    close(sockfd);
    return 0;
}
//client 
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>

#define MAX_BUFFER_SIZE 1024
#define PORT 12345

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[MAX_BUFFER_SIZE];

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
        error("ERROR opening socket");

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    if (inet_aton("127.0.0.1", &server_addr.sin_addr) == 0)
        error("ERROR invalid server IP");

    // Open file to send
    std::ifstream file_to_send("file_to_send", std::ios::in | std::ios::binary);
    if (!file_to_send.is_open()) {
        std::cerr << "Error opening file to read" << std::endl;
        close(sockfd);
        exit(1);
    }

    // Determine file size
    file_to_send.seekg(0, std::ios::end);
    int file_size = file_to_send.tellg();
    file_to_send.seekg(0, std::ios::beg);

    // Send file size to server
    file_size = htonl(file_size);  // Convert to network byte order
    if (sendto(sockfd, &file_size, sizeof(file_size), 0, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
        error("ERROR in sendto");

    std::cout << "Sending file of size: " << ntohl(file_size) << " bytes" << std::endl;

    // Send file data
    int bytes_sent;
    while (!file_to_send.eof()) {
        file_to_send.read(buffer, MAX_BUFFER_SIZE);
        bytes_sent = sendto(sockfd, buffer, file_to_send.gcount(), 0,
                            (struct sockaddr *) &server_addr, sizeof(server_addr));
        if (bytes_sent < 0)
            error("ERROR in sendto");
    }

    file_to_send.close();
    std::cout << "File sent successfully." << std::endl;

    close(sockfd);
    return 0;
}
