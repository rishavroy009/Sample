#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/select.h>
#include <map>

#define MAX_BUFFER_SIZE 1024
#define PORT 12345

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[MAX_BUFFER_SIZE];

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
        error("ERROR opening socket");

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(PORT);

    // Bind socket to local address
    if (bind(sockfd, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
        error("ERROR on binding");

    std::cout << "Server listening on port " << PORT << "..." << std::endl;

    fd_set readfds;
    FD_ZERO(&readfds);
    FD_SET(sockfd, &readfds);
    int max_sd = sockfd;

    std::map<int, std::ofstream> client_files;
    std::map<int, int> client_file_sizes;
    std::map<int, int> client_total_received;
    std::map<int, std::string> client_filenames;

    while (true) {
        fd_set tempfds = readfds;

        int activity = select(max_sd + 1, &tempfds, NULL, NULL, NULL);
        if (activity < 0) {
            error("ERROR in select");
        }

        if (FD_ISSET(sockfd, &tempfds)) {
            int bytes_received = recvfrom(sockfd, buffer, MAX_BUFFER_SIZE, 0,
                                          (struct sockaddr *) &client_addr, &client_len);
            if (bytes_received < 0) {
                error("ERROR in recvfrom");
            }

            int client_id = ntohs(client_addr.sin_port);
            if (client_files.find(client_id) == client_files.end()) {
                // New client connection
                int filename_length;
                memcpy(&filename_length, buffer, sizeof(filename_length));
                filename_length = ntohl(filename_length);
                
                std::string filename(buffer + sizeof(filename_length), filename_length);

                int file_size;
                memcpy(&file_size, buffer + sizeof(filename_length) + filename_length, sizeof(file_size));
                file_size = ntohl(file_size);
                
                client_filenames[client_id] = filename;
                client_file_sizes[client_id] = file_size;
                client_total_received[client_id] = 0;
                client_files[client_id].open(filename, std::ios::out | std::ios::binary);
                if (!client_files[client_id].is_open()) {
                    std::cerr << "Error opening file to write for client " << client_id << std::endl;
                    close(sockfd);
                    exit(1);
                }
                std::cout << "Receiving file '" << filename << "' of size: " << file_size << " bytes from client " << client_id << std::endl;
            } else {
                // Existing client connection
                int total_received = client_total_received[client_id];
                int file_size = client_file_sizes[client_id];
                int bytes_to_receive = std::min(MAX_BUFFER_SIZE, file_size - total_received);

                client_files[client_id].write(buffer, bytes_received);
                client_total_received[client_id] += bytes_received;

                // Send ACK to client
                if (sendto(sockfd, buffer, bytes_received, 0,
                           (struct sockaddr *) &client_addr, client_len) < 0) {
                    error("ERROR in sendto");
                }

                if (client_total_received[client_id] >= file_size) {
                    client_files[client_id].close();
                    std::cout << "File '" << client_filenames[client_id] << "' received successfully from client " << client_id << std::endl;
                    client_files.erase(client_id);
                    client_file_sizes.erase(client_id);
                    client_total_received.erase(client_id);
                    client_filenames.erase(client_id);
                }
            }
        }
    }

    close(sockfd);
    return 0;
}
//client
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>
#include <ctime>

#define MAX_BUFFER_SIZE 1024
#define PORT 12345
#define TIMEOUT_SEC 1

void error(const char *msg) {
    perror(msg);
    exit(1);
}

bool receiveACK(int sockfd, struct sockaddr_in &server_addr, socklen_t server_len) {
    char ack[MAX_BUFFER_SIZE];
    fd_set readfds;
    struct timeval timeout;
    timeout.tv_sec = TIMEOUT_SEC;
    timeout.tv_usec = 0;
    FD_ZERO(&readfds);
    FD_SET(sockfd, &readfds);
    int retval = select(sockfd + 1, &readfds, NULL, NULL, &timeout);
    if (retval == -1) {
        return false;
    }
    else if (retval) {
        if (FD_ISSET(sockfd, &readfds)) {
            int ack_len = recvfrom(sockfd, ack, MAX_BUFFER_SIZE, 0, (struct sockaddr*)&server_addr, &server_len);
            if (ack_len < 0) {
                error("ERROR in recvfrom");
            }
            return true;
        }
    }
    return false;
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[MAX_BUFFER_SIZE];

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
        error("ERROR opening socket");

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    if (inet_aton("127.0.0.1", &server_addr.sin_addr) == 0)
        error("ERROR invalid server IP");

    // Open file to send
    std::string filename = "file_to_send.txt";  // Change this to your file name
    std::ifstream file_to_send(filename, std::ios::in | std::ios::binary);
    if (!file_to_send.is_open()) {
        std::cerr << "Error opening file to read" << std::endl;
        close(sockfd);
        exit(1);
    }

    // Determine file size
    file_to_send.seekg(0, std::ios::end);
    int file_size = file_to_send.tellg();
    file_to_send.seekg(0, std::ios::beg);

    // Send filename length, filename, and file size to server
    int filename_length = filename.size();
    int filename_length_n = htonl(filename_length);  // Convert to network byte order
    int file_size_n = htonl(file_size);  // Convert to network byte order

    memcpy(buffer, &filename_length_n, sizeof(filename_length_n));
    memcpy(buffer + sizeof(filename_length_n), filename.c_str(), filename_length);
    memcpy(buffer + sizeof(filename_length_n) + filename_length, &file_size_n, sizeof(file_size_n));

    if (sendto(sockfd, buffer, sizeof(filename_length_n) + filename_length + sizeof(file_size_n), 0, 
               (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
        error("ERROR in sendto");

    std::cout << "Sending file '" << filename << "' of size: " << file_size << " bytes" << std::endl;

    // Send file data with reliability
    int bytes_sent;
    while (!file_to_send.eof()) {
        file_to_send.read(buffer, MAX_BUFFER_SIZE);
        bytes_sent = sendto(sockfd, buffer, file_to_send.gcount(), 0,
                            (struct sockaddr *) &server_addr, sizeof(server_addr));
        if (bytes_sent < 0)
            error("ERROR in sendto");

        // Wait for ACK from server
        struct sockaddr_in ack_addr;
        socklen_t ack_len = sizeof(ack_addr);
        bool ack_received = receiveACK(sockfd, ack_addr, ack_len);
        if (!ack_received) {
            std::cerr << "Timeout occurred. Resending last packet..." << std::endl;
            file_to_send.seekg(-(file_to_send.gcount()), std::ios::cur); // Rewind file position
        }
    }

    file_to_send.close();
    std::cout << "File sent successfully." << std::endl;

    close(sockfd);
    return 0;
}
