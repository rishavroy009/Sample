Server Code
Setup:

The server creates a UDP socket using socket(AF_INET, SOCK_DGRAM, 0).
It initializes the server address structure (server_addr) to listen on any IP address (INADDR_ANY) and port 12345.
The socket is then bound to this address using bind.
Listening:

The server sets up a file descriptor set (fd_set) to monitor the socket for incoming data using select.
select is used to wait for activity (incoming data) on the socket. It monitors multiple file descriptors and can also specify a timeout, though in this case, it waits indefinitely.
Receiving Data:

When select indicates that there's data to read, the server uses recvfrom to receive the data.
It distinguishes between new and existing clients using the client's port (client_id = ntohs(client_addr.sin_port)).
If it's a new client, the server extracts the filename and file size from the received data, creates and opens a new file for writing, and initializes the tracking structures for this client.
For existing clients, it appends the received data to the corresponding file and sends an acknowledgment back using sendto.
Acknowledgement:

After writing the received data to the file, the server sends an ACK (acknowledgment) back to the client using sendto.
When the file is completely received, the server closes the file and cleans up the tracking structures for that client.
Client Code
Setup:

The client creates a UDP socket and initializes the server address structure (server_addr) to connect to the server's IP (127.0.0.1) and port 12345.
Sending Initial Data:

The client opens the file to be sent and determines its size.
It sends the filename length, filename, and file size to the server in a single UDP packet.
Sending File Data:

The client reads chunks of the file and sends them to the server using sendto.
After each chunk is sent, the client waits for an ACK from the server using a helper function receiveACK.
Acknowledgement Handling:

receiveACK uses select to wait for an acknowledgment with a timeout.
If an ACK is received within the timeout period, the client proceeds to send the next chunk.
If no ACK is received (timeout occurs), the client resends the last chunk by rewinding the file position.
Use of select for I/O Multiplexing
Server:

select is used to monitor the UDP socket for incoming data without blocking the server. This allows the server to handle multiple clients using a single thread by responding only when there is data to read.
Client:

select is used to wait for an acknowledgment from the server with a specified timeout. This ensures that the client doesn't block indefinitely and can handle timeouts gracefully by resending the last packet if necessary.
Detailed Flow
Client starts:

Sends metadata (filename length, filename, file size) to the server.
Reads and sends chunks of the file.
Waits for an ACK after each chunk.
Server starts:

Binds to port 12345 and waits for incoming data.
On receiving metadata from a new client, it initializes file handling for the client.
On receiving file data, it writes to the corresponding file and sends an ACK.
Closes the file once all data is received.
Acknowledgement System:

After sending each chunk, the client waits for an ACK using select.
If ACK is received within the timeout, the client proceeds.
If no ACK is received, the client resends the last chunk.
This approach avoids using threads, making the implementation simpler and avoiding potential issues with thread synchronization and resource contention. Instead, select allows handling multiple I/O streams efficiently in a single-threaded application.
//receiveACK function working
Detailed Breakdown
Variable Declarations:

char ack[MAX_BUFFER_SIZE];: Buffer to store the received acknowledgment data.
fd_set readfds;: File descriptor set used by select to monitor the socket for readability.
struct timeval timeout;: Structure to specify the timeout duration for select.
Setting Timeout Interval:

timeout.tv_sec = TIMEOUT_SEC;: Sets the timeout interval in seconds.
timeout.tv_usec = 0;: Sets the timeout interval in microseconds (0 in this case).
Clearing and Setting File Descriptor Set:

FD_ZERO(&readfds);: Clears the file descriptor set.
FD_SET(sockfd, &readfds);: Adds the socket descriptor (sockfd) to the file descriptor set.
Using select to Wait for Data:

int retval = select(sockfd + 1, &readfds, NULL, NULL, &timeout);: Waits for the socket to become ready for reading. This call monitors the socket for readability, with a timeout specified by timeout.
sockfd + 1: The range of file descriptors to be monitored.
&readfds: The set of file descriptors to be monitored for readability.
NULL, NULL: We are not monitoring for writability or exceptional conditions in this case.
&timeout: Specifies the maximum interval to wait for an event.
Handling select Results:

if (retval == -1): Checks if select encountered an error. If so, the function returns false.
else if (retval): Checks if any file descriptors are ready for reading. If so, it enters the block.
if (FD_ISSET(sockfd, &readfds)): Checks if the socket descriptor is part of the set ready for reading.
int ack_len = recvfrom(sockfd, ack, MAX_BUFFER_SIZE, 0, (struct sockaddr*)&server_addr, &server_len);: Receives data from the socket.
ack: Buffer to store the received data.
MAX_BUFFER_SIZE: Maximum number of bytes to read.
0: Flags (none in this case).
(struct sockaddr*)&server_addr: Address of the server (filled by recvfrom).
&server_len: Size of the address structure.
if (ack_len < 0): Checks if recvfrom encountered an error. If so, calls error to handle it.
return true;: If data is successfully received, the function returns true.
Timeout Case:

return false;: If no file descriptors are ready for reading (timeout occurred), the function returns false.
Summary
The receiveACK function is responsible for:

Setting up a timeout for receiving the acknowledgment.
Using select to wait for data on the socket without blocking indefinitely.
Checking if the socket is ready for reading.
Receiving the acknowledgment and returning true if successful.
Handling timeouts and errors by returning false.
This function allows the client to implement a reliable communication mechanism over UDP by waiting for an acknowledgment after sending each packet and resending if the acknowledgment is not received within the specified timeout period.
